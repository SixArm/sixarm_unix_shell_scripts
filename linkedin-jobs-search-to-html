#!/usr/bin/env python3

##
# LinkedIn jobs search to HTML
#
# Syntax:
#
#     linkedin-jobs-search-to-html <keywords>
#
# Example:
#
#     linkedin-jobs-search-to-html programmer
#
# Example URL of a search:
#
#   * https://www.linkedin.com/jobs/search?keywords=programmer
#
# Example URL of a result:
#
#   * https://www.linkedin.com/jobs/search?currentJobId=100000000
#
# Based on work by:
#
#   * https://www.linkedin.com/pulse/how-easy-scraping-data-from-linkedin-profiles-david-craven/
#
# Preflight:
#
# ```sh
# pip3 install ipython
# pip3 install selenium
# pip3 install time
# pip3 install parsel
# pip3 install csv
# ```
##

import argparse
import os
import pathlib
import random
import sys
import time
import urllib

from dataclasses import dataclass
from selenium import webdriver
from typing import List

##
#
# Data class section
#
##

@dataclass
class Job:
    id: int
    description: str = ""

    def __str__(self):
        
        self.x = 'Hello'
    def __str__(self):
        return f'{self.id} {self.description}'

##
#
# Global
#
##

db = {'jobs': {}}  # Store of global data for lookups
driver = None  # Selenium Chrome web driver


##
#
# Language
#
##

def each(function, iterable):
    for element in iterable:
        function(element)

def sleepy(seconds = 10):
    time.sleep(random.random * 10)

def db_get(key, id):
    return db[key][id]

def db_set(key, id, object):
    print("db_set", id, object)
    db[key][id] = object

##
#
# CLI
#
##

def parse_args():
    parser = argparse.ArgumentParser(description="LinkedIn jobs search to JSON")
    parser.add_argument("keywords", help="jobs search keywords")
    args = parser.parse_args()
    return args

def create_driver():
    # Configure Chrome browser options
    chrome_options = webdriver.chrome.options.Options()
    chrome_options.add_argument("--disable-extensions")

    # Create a Chrome web driver
    driver_path = "/usr/local/bin/chromedriver"
    driver = webdriver.Chrome(driver_path, options=chrome_options)
    return driver

##
#
# Web interaction
#
##

def go_home():
    driver.get("https://www.linkedin.com/")

def go_login(username, password):
    go_home()
    driver.find_element_by_link_text("Sign in").click()
    form = driver.find_element_by_class_name("login__form")
    form.find_element_by_id("username").send_keys(os.environ["LINKEDIN_USERNAME"])
    form.find_element_by_id("password").send_keys(os.environ["LINKEDIN_PASSWORD"])
    form.find_element_by_xpath("//button[@type='submit']").click()

def go_search(keywords):
    query_string = urllib.parse.urlencode({"keywords": keywords})
    driver.get("https://www.linkedin.com/jobs/search?" + query_string)

def go_job(id):
    query_string = urllib.parse.urlencode({"currentJobId": id})
    driver.get("https://www.linkedin.com/jobs/search?" + query_string)

def find_job_list_items():
    list = driver.find_element_by_class_name("jobs-search__results-list")
    items = list.find_elements_by_tag_name("li")
    return items

def find_job_ids():
    items = find_job_list_items()
    job_ids = list(map(int, map(element_data_id, items)))
    return job_ids

def find_job_description():
    return driver.find_element_by_class_name("results__detail-view") \
                 .find_element_by_class_name("description__text--rich")

def element_data_id(element):
    return element.get_attribute("data-id")

driver = create_driver()

def main():
    args = parse_args()
    #go_login(os.environ["LINKEDIN_USERNAME"], os.environ["LINKEDIN_PASSWORD"]) and sleepy()    
    go_search(args.keywords) and sleepy()

    print("==== ids =====")
    ids = find_job_ids()
    print(*ids)

    print("==== jobs =====")
    jobs = list(map(lambda x: Job(x), ids))
    for job in jobs:
        db_set('jobs', job.id, job)
    print(*jobs)

    return

    # Click the button to see more jobs
    button = driver.find_element_by_class_name("see-more-jobs")
    button.click() and sleepy()

    print("==== ids =====")
    ids = find_job_ids()
    print(ids)

    description = find_job_description()
    html = description.get_attribute("innerHTML")
    print(html)

main()
