#!/usr/bin/env python3

##
# LinkedIn jobs search to HTML
#
# Syntax:
#
#     linkedin-jobs-search-to-html <keywords>
#
# Example:
#
#     linkedin-jobs-search-to-html programmer
#
# Example URL of a search:
#
#   * https://www.linkedin.com/jobs/search?keywords=programmer
#
# Example URL of a search with "for time posted is within past 1 day":
#
#   * https://www.linkedin.com/jobs/search?keywords=programmer&f_TP=1
#
# Example URL of a result:
#
#   * https://www.linkedin.com/jobs/search?currentJobId=100000000
#
# Example URL of an API call that also works incognito:
#
#   * https://www.linkedin.com/jobs-guest/jobs/api/jobPosting/100000000
#
# Based on work by:
#
#   * https://www.linkedin.com/pulse/how-easy-scraping-data-from-linkedin-profiles-david-craven/
#
# Preflight:
#
# ```sh
# pip3 install ipython
# pip3 install selenium
# pip3 install time
# pip3 install parsel
# pip3 install csv
# ```
#
# LinkedIn URLs that we may want to use in the future:
#
#   * https://www.linkedin.com/checkpoint/lg/login?...
#
#   * ... (for security challenge)
#
##

import argparse
import os
import pathlib
import random
import sys
import textwrap
import time
import unittest
import urllib

from contextlib import contextmanager
from dataclasses import dataclass
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.common.exceptions import NoAlertPresentException
from selenium.common.exceptions import TimeoutException
from typing import List

##
#
# Data class section
#
##

@dataclass
class Job:
    id: int
    description: str = ""

    def __str__(self):
        return f'{self.id} {self.description}'

##
#
# Global
#
##

driver = None  # Selenium Chrome web driver
online = True  # True means use online real site; False means use offline local cache

##
#
# System
#
##

def app_path():
    'linkedin-jobs-search-to-html'

def cache_home():
    return os.environ.get('XDG_CACHE_HOME', (os.environ.get('HOME', '~/') + '/.cache'))

def cache_dir():
    cache_home() + '/' + app_path()

##
#
# Language
#
##

def each(function, iterable):
    for element in iterable:
        function(element)

def sleepy(seconds = 10.0):
    time.sleep(random.random() * seconds)

##
#
# Data store
#
##

db = {'jobs': {}}  # Store of global data for lookups

def db_get(key, id):
    return db[key][id]

def db_set(key, id, object):
    db[key][id] = object


##
#
# Selenium extras
#
##

# Credit: http://www.obeythetestinggoat.com/how-to-get-selenium-to-wait-for-page-load-after-a-click.html
def link_is_stale(link):
    try:
        link.find_elements_by_id('x') # poll the link with an arbitrary call
        return False
    except StaleElementReferenceException:
        return True

# Credit: http://www.obeythetestinggoat.com/how-to-get-selenium-to-wait-for-page-load-after-a-click.html
def link_click_fresh(link):
    link.click()
    wait_for(link_has_gone_stale(link))

def map_element_to_attribute(element, attribute):
    return element.get_attribute(attribute)

def map_element_to_attribute_list(element, attribute):
    return map(lambda x: map_element_to_attribute(x, attribute), element.find_elements_by_xpath('./*[@' + attribute + ']'))

##
#
# Selenium expectations
#
##

class expect_current_url_starts_with(object):
    """An expectation for checking that the current URL starts with text.

    Example: wait until the current URL starts with 'https://example.com'

        wait = WebDriverWait(driver, 10)
        element = wait.until(expect_current_url_starts_with('https://example.com'))

    text - any text
    """
    def __init__(self, text):
        self.text = text

    def __call__(self, driver):
        """Return true iff the current URL starts with the text."""
        return driver.current_url.startswith(self.text)

# Credit: https://selenium-python.readthedocs.io/waits.html
class expect_element_has_css_class(object):
    """An expectation for checking that an element has a particular css class.

    Example: wait until an element with id='myId' has CSS class 'myClass':

        wait = WebDriverWait(driver, 10)
        element = wait.until(expect_element_has_css_class((By.ID, 'myId'), 'myClass')

    locator - used to find the element
    css_class - a CSS class name
    returns the WebElement once it has the particular css class
    """
    def __init__(self, locator, css_class):
        self.locator = locator
        self.css_class = css_class

    def __call__(self, driver):
        element = driver.find_element(*self.locator)   # Finding the referenced element
        if self.css_class in element.get_attribute("class"):
            return element
        else:
            return False

# Credit: https://www.fomfus.com/articles/make-selenium-wait-for-anything-you-want-before-continuing
class expect_element_by_css_selector(object):
    """An expectation for checking that an element exists.

    Example: wait until an element exists with CSS selector 'mySelector':

        wait = WebDriverWait(driver, 10)
        element = wait.until(expect_element_expect_element_by_css_selector('mySelector'))

    css_selector - a CSS selector
    returns the WebElement once it has the particular css class
    """
    def __init__(self, css_selector):
        self.css_selector = css_selector

    def __call__(self, driver):
        """Search for element; return true iff found."""
        try:
            driver.find_elements_by_css_selector(self.css_selector)
            return True
        except NoSuchElementException:
            return False

# Credit: https://www.fomfus.com/articles/make-selenium-wait-for-anything-you-want-before-continuing
class expect_elements_by_css_selector(object):
    """An expectation for checking that an element exists "number" times.

    Example: wait until an element with CSS selector 'mySelector' exists 3 times:

        wait = WebDriverWait(driver, 10)
        element = wait.until(expect_element_expect_element_by_css_selector('mySelector', 3))

    css_selector - a CSS selector
    returns the WebElement once it has the particular css class
    """
    def __init__(self, css_selector, number):
        self.css_selector = css_selector
        self.number = number

    def __call__(self, driver):
        """Search for element, and return true when found self.number times."""
        try:
            found = len(driver.find_elements_by_css_selector(self.css_selector))
        except NoSuchElementException:
            found = 0

        return found == self.number

##
#
# CLI
#
##

def parse_args():
    parser = argparse.ArgumentParser(description="LinkedIn jobs search to JSON")
    parser.add_argument("keywords", help="jobs search keywords")
    args = parser.parse_args()
    return args

def create_driver():
    # Configure Chrome browser options
    chrome_options = webdriver.chrome.options.Options()
    chrome_options.add_argument("--disable-extensions")

    # Create a Chrome web driver
    driver_path = "/usr/local/bin/chromedriver"
    driver = webdriver.Chrome(driver_path, options=chrome_options)
    return driver

##
#
# URLs with environments
#
##

def url_base():
    if env == 'PRODUCTION':
        return url_base_with_env_production()
    else:
        return url_base_with_env_development()

def url_base_with_env_production():
    return 'https://www.linkedin.com'

def url_base_with_env_development():
    return 'file://cache'

def url_login():
    if env == 'PRODUCTION':
        return url_login_with_env_production()
    else:
        return url_login_with_env_development()

def url_login_with_env_production():
    return url_base() + '/login'

def url_login_with_env_development():
    return '/login.html'

def url_jobs_search(keywords):
    if env == 'PRODUCTION':
        return url_jobs_search_with_env_production()
    else:
        return url_jobs_search_with_env_development()

def url_jobs_search_with_env_production(keywords):
    return url_base() + '/jobs/search?' + urllib.parse.urlencode({'keywords': keywords})

def url_jobs_search_with_env_development(keywords):
    return url_base() + '/jobs_search.html'

##
#
# Web interaction
#
##

def go_home():
    driver.get(url_base)

def go_login(username, password):
    driver.get(url_login())
    form = driver.find_element_by_css_selector("form.login__form")
    form.find_element_by_css_selector("input#username").send_keys(username)
    form.find_element_by_css_selector("input#password").send_keys(password)
    form.find_element_by_xpath("//button[@type='submit']").click()

def go_security_verification():
    try:
        WebDriverWait(driver,10).until(expect_current_url_starts_with(url_base + '/checkpoint/challenge'))
        form = driver.find_element_by_css_selector('form#two-step-challenge')
        form.find_element_by_css_selector('input#input__phone_verification_pin').send_keys('0')
        WebDriverWait(driver,600).until(expect_current_url_starts_with(url_base + '/feed/'))
    except TimeoutException:
        pass

def go_jobs_search(keywords):
    driver.get(url_jobs_search(keywords))

def go_job(id):
    query_string = urllib.parse.urlencode({"currentJobId": id})
    driver.get(url_base + '/jobs/search?' + query_string)

def find_job_list():
    return driver.find_element_by_css_selector("ul.jobs-search-results__list")

def find_job_list_items():
    return find_job_list().find_elements_by_tag_name("li")

def find_job_ids():
    items = find_job_list_items()
    job_ids = list(map(int, map(map_job_list_item_to_job_id, items)))
    return job_ids

def map_job_list_item_to_job_id(job_list_item):
    urn = job_list_item.find_element_by_xpath('./*[@data-job-id]').get_attribute('data-job-id')
    job_id = int(urn.split(':')[-1])
    return job_id

def find_job_description():
    return driver.find_element_by_class_name('results__detail-view') \
                 .find_element_by_class_name('description__text--rich')

def cli_main():
    global driver
    driver = create_driver()
    args = parse_args()
    username = os.environ["LINKEDIN_USERNAME"]
    password = os.environ["LINKEDIN_PASSWORD"]
    go_login(username, password) and sleepy() 
    #go_security_verification()
    go_jobs_search(args.keywords) and sleepy()

    for _ in range(2):
        print('==== loop =====')
        ids = find_job_ids()
        jobs = list(map(lambda x: Job(x), ids))
        for job in jobs:
            db_set('jobs', job.id, job)

        # Click the button to see more jobs
        button = driver.find_element_by_class_name('see-more-jobs')
        button.click() 
        sleep(5)

    return
    description = find_job_description()
    html = description.get_attribute('innerHTML')
    print(html)

##
#
# Test
#
##

class TestDB(unittest.TestCase):

    def test_db_get(self):
        db_set('jobs', 'id', 'object')
        self.assertEqual(db_get('jobs', 'id'), 'object')

    def test_db_set(self):
        db_set('jobs', 'id', 'object')
        self.assertEqual(db_get('jobs', 'id'), 'object')

class TestAll(unittest.TestCase):

    def test_each(self):
        pass

    def test_sleepy(self):
        sleepy(0)

    def test_link_is_stale(self):
        pass

    def test_link_click_fresh(self):
        pass

class TestSeleniumMaps(unittest.TestCase):

    def test_map_element_to_attribute(self):
        html = '<html><body><p id="alpha" name="bravo"></p></body></html>'
        driver.get("data:text/html;charset=utf-8," + html)
        element = driver.find_element_by_id('alpha')
        self.assertEqual(map_element_to_attribute(element, 'name'), 'bravo')

    def test_map_element_to_attribute_list(self):
        html = '<html><body id="body"><p id="alpha" name="bravo"></p><p id="charlie" name="delta"></p></body></html>'
        driver.get("data:text/html;charset=utf-8," + html)
        element = driver.find_element_by_id('body')
        self.assertEqual(list(map_element_to_attribute_list(element, 'name')), ['bravo', 'delta'])

class TestSeleniumExpectations(unittest.TestCase):

    def test_expect_current_url_starts_with(self):
        pass
    
    def test_expect_element_has_css_class(self):
        pass

    def test_expect_element_by_css_selector(self):
        pass

    def test_expect_elements_by_css_selector(self):
        pass
    
class TestStartup(unittest.TestCase):

    def test_parse_args(self):
        pass

    def test_create_driver(self):
        pass

class TestLinkedInURLs(unittest.TestCase):

    def test_url_base(self):
        pass

    def test_url_base_with_env_production(self):
        self.assertEqual(url_base_with_env_production(), 'https://linkedin.com')

    def test_url_base_with_env_development(self):
        self.assertEqual(url_base_with_env_development(), 'file://')

    def test_url_login(self):
        pass

    def test_url_login_with_env_production(self):
        self.assertEqual(url_login_with_env_production(), 'https://linkedin.com/login')

    def test_url_login_with_env_development(self):
        self.assertEqual(url_base_with_env_development(), 'file://.cache/linkedin-jobs-search-to-html/linkedin.com/login.html')

    def test_url_jobs_search(self):
        pass

    def test_url_jobs_search_with_env_production(self):
        self.assertEqual(url_jobs_search('alpha bravo'), 'https://linkedin.com/jobs/search?keywords=alpha+bravo')

    def test_url_jobs_search_with_env_development(self):
        self.assertEqual(url_jobs_search('alpha bravo'), 'file://.cache/linkedin-jobs-search-to-html/linkedin.com/jobs/search.html')

class TestLinkedInWebInterations(unittest.TestCase):

    DATA = "data:text/html;charset=utf-8," 

    JOB_HTML = textwrap.dedent('''\
    <html>
        <body>
            <ul class="jobs-search-results__list">
                <li><div data-job-id="urn:li:x:123">Alpha</div></li>
                <li><div data-job-id="urn:li:x:456">Bravo</div></li>
                <li><div data-job-id="urn:li:x:789">Bravo</div></li>
            </ul>
        </body>
    </html>
    ''')

    def test_go_home(self):
        pass

    def test_go_login(self):
        pass

    def test_go_security_verification(self):
        pass

    def test_go_jobs_search(self):
        pass

    def test_go_job(self):
        pass

    def test_find_job_list(self):
        driver.get(self.DATA + self.JOB_HTML)
        self.assertIsNotNone(find_job_list())

    def test_find_job_list_items(self):
        driver.get(self.DATA + self.JOB_HTML)
        self.assertEqual(len(find_job_list_items()), 3)

    def test_find_job_ids(self):
        driver.get(self.DATA + self.JOB_HTML)
        self.assertEqual(find_job_ids(), [123, 456, 789])

    def test_find_job_description(self):
        pass

    def test_map_job_list_item_to_job_id(self):
        pass

if __name__ == '__main__':
    driver = create_driver()
    env = os.environ.get('ENV', 'DEVELOPMENT')
    if env == 'UNITTEST':
        unittest.main()
    else:
        cli_main()
